#####################
# Jean-Philippe Legault (jlegault@unb.ca, jeanphilippe.legault@gmail.com) and
#  Dr. Kenneth B. Kent (ken@unb.ca)
#  for the Reconfigurable Computing Research Lab at the
#  Univerity of New Brunswick in Fredericton, New Brunswick, Canada
#####################

# Sign modifier
Sign_minus,		        -,  4'b1010,	4'b0110
Sign_plus,			    +,  4'b1010,	4'b1010

# Increment
Increment,		        ++,	4'b1010,	4'b1011
Decrement,		        --,	4'b1010,	4'b1001

# Reduction
Reduction-and,			&,  4'b1010,	1'b0
Reduction-or,			|,  4'b1010,	1'b1
Reduction-xor,			^,  4'b1010,	1'b0
Reduction-nand,			~&,	4'b1010,	1'b1
Reduction-nor,			~|,	4'b1010,	1'b0
Reduction-xnor,			~^,	4'b1010,	1'b1

# bitwise
Bitwise-Not,	            ~,  4'b1010,	4'b0101
Bitwise-And,	4'b1010,	&,  4'b1000,	4'b1000
Bitwise-Or,		4'b1010,	|,  4'b1000,	4'b1010
Bitwise-Nor,	4'b1010,	~|, 4'b1000,	4'b0101
Bitwise-Nand,   4'b1010,	~&, 4'b1000,	4'b0111
Bitwise-Xnor,   4'b1010,	~^, 4'b1000,	4'b1101
Bitwise-Xor,	4'b1010,	^,  4'b1000,	4'b0010

# case equivalence
Case-eq,		4'b1x10,	===,  4'b1x10,	1'b1
Case-ne,		4'b1x11,	!==,  4'b1x10,	1'b1
Case-ne,		4'b1x10,	!==,  4'b1x10,	1'b0
Case-eq,		4'b1x11,	===,  4'b1x10,	1'b0

# logical operation
Logical-Not,	                    !,  4'b1010,	1'b0
Logical-And,			4'b1010,	&&, 4'b1000,	1'b1
Logical-Or,				4'b1010,	||, 4'b1000,	1'b1
Logical-Or,				4'b0000,	||, 4'b1000,	1'b1
Logical-Or,				4'b0000,	||, 4'b0000,	1'b0	
Logical-less,			4'b0000,	<,	4'b0001,	1'b1
Logical-greater,		4'b0000,	>,	4'b0001,	1'b0	
Logical-greater-equal,	4'b0000,	>=, 4'b0000,	1'b1	
Logical-less-equal,		4'b0000,	<=, 4'b0000,	1'b1	
Logical-equal,			4'b0000,	==, 4'b0000,	1'b1	
Logical-not-equal,		4'b0000,	!=,	4'b0001,	1'b1

# shift operation
Shift-left,				5'b00100,	<<,		2'b10,	5'b10000
Shift-right, 			5'b00100,	>>,		2'b10,	5'b00001
Signed-shift-left,		5'b00100,	<<<,	2'b10,	5'b10000
Signed-shift-right,		5'b10100,	>>>,	2'b10,	5'b11101

# arithmetic
Basic-Addition,			1,  +,  1,  2'sb10
Basic-Subtraction,		4,  -,  2,  2'sb10
#Basic-Division,			10, /,  2,  3'sb0101
Basic-Multiplication,	2,  *,  2,  3'sb0100
#Basic-Division,			10, %,  2,  1'sb0
Basic-Multiplication,   2,  **,  0,  1'sb1

# Ternary operations
if-else_switch,			1,  ?,  10,  :, 0, 10
